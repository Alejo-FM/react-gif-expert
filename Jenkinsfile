pipeline {
    agent any

    environment {
        APP_NAME = 'my-react-app'
        CONTAINER_PORT = '80'
        HOST_PORT = '8081'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Clonando el repositorio Git..."
            }
        }

        stage('Build Docker Image Locally on Host') {
            steps {
                script {
                    echo "Construyendo la imagen Docker '${APP_NAME}:latest' en el host usando Docker Pipeline plugin..."
                    // Usa docker.build() del plugin Docker Pipeline.
                    // El 'docker' aqu칤 se refiere al objeto global de Docker inyectado por el plugin.
                    // El '.' como segundo argumento indica el contexto de construcci칩n (directorio actual).
                    docker.build("${APP_NAME}:latest", ".")
                }
            }
        }

        stage('Stop and Remove Old Container') {
            steps {
                script {
                    echo "Deteniendo y eliminando el contenedor antiguo si existe..."
                    // Aqu칤 todav칤a podr칤amos usar 'sh' si no hay un paso de Docker Pipeline
                    // directo para detener/eliminar contenedores por nombre,
                    // o podr칤amos intentar con el objeto 'docker' si lo permite.
                    // Para simplificar, y dado que la API de Docker s칤 soporta estas operaciones,
                    // podemos usar 'sh' si docker-cli est치 disponible (que es lo que intentamos evitar)
                    // o implementar una l칩gica m치s avanzada con las librer칤as.
                    // Para este caso, el plugin Docker Pipeline a menudo maneja esto indirectamente
                    // cuando lanzas un nuevo contenedor (matando el viejo).
                    // Sin embargo, para un control expl칤cito de 'stop' y 'rm', a menudo se requiere el CLI
                    // o una interacci칩n m치s directa con el API.
                    // Por ahora, para evitar el 'docker: not found', vamos a simularlo
                    // o asumir que la creaci칩n de un nuevo contenedor manejar치 el reemplazo.

                    // Si el objetivo es NO tener 'docker-cli' en Jenkins,
                    // esta parte es donde el plugin Docker Pipeline podr칤a ser limitado
                    // para 'stop' y 'rm' por nombre *expl칤citamente*.
                    // Normalmente, cuando haces un 'docker run' con un nombre existente,
                    // ya te da un error. Para manejarlo sin CLI:

                    // Una forma m치s "plugin-friendly" para asegurar que un contenedor no est칠 corriendo
                    // antes de lanzar el nuevo ser칤a mediante el uso de "Docker Cloud" o una
                    // configuraci칩n de agente Docker m치s avanzada.
                    // PERO, para tu caso de despliegue simple, podr칤amos simplemente intentar lanzar
                    // y si falla porque ya existe el nombre, revisar logs.
                    // O, si queremos limpieza, se requerir칤a el CLI o una integraci칩n API m치s profunda.

                    // POR AHORA, para avanzar y evitar el "docker: not found" en 'docker build':
                    // Mantendremos esta etapa pero con un 'echo' y la nota.
                    // Si el problema persiste aqu칤, es un tema de c칩mo el plugin maneja 'run' sobre existentes.
                    echo "Asumiendo que el lanzamiento del nuevo contenedor gestionar치 el reemplazo."
                    echo "Si el contenedor ya existe y esto falla, considera a침adir un agente Docker con CLI."
                }
            }
        }

        stage('Run New Container') {
            steps {
                script {
                    echo "Levantando el nuevo contenedor '${APP_NAME}-container' con Docker Pipeline plugin..."
                    def customImage = docker.image("${APP_NAME}:latest")
                    customImage.run("-d --name ${APP_NAME}-container -p ${HOST_PORT}:${CONTAINER_PORT}")
                    // El plugin se encargar치 de levantar el contenedor.
                    // En algunos casos, si un contenedor con el mismo nombre ya existe,
                    // este paso fallar칤a. Para un reemplazo robusto sin CLI en Jenkins,
                    // usualmente se usa un enfoque de orquestaci칩n (Docker Swarm, Kubernetes)
                    // o un agente Jenkins con Docker CLI.
                }
            }
        }

        stage('Post-Deployment Verification (Optional)') {
            steps {
                script {
                    echo "Realizando una verificaci칩n post-despliegue..."
                    // Si necesitas 'curl' o 'wget' aqu칤 para verificar tu app,
                    // recuerda que esos comandos tampoco estar칤an en el contenedor Jenkins por defecto.
                    // Podr칤as instalarlos temporalmente en un 'sh' o usar un paso Groovy diferente.
                    echo "Verificaci칩n simple completada. Considere a침adir una prueba m치s robusta."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finalizado. Revisa la 'Console Output' para m치s detalles."
        }
        success {
            echo "춰Despliegue de '${APP_NAME}' exitoso! 游꿀 La aplicaci칩n deber칤a estar accesible en el puerto ${HOST_PORT}."
        }
        failure {
            echo "춰Despliegue de '${APP_NAME}' fallido! 游댮 Hubo errores en el pipeline. Revisa la 'Console Output' cuidadosamente."
        }
    }
}


// // Define el pipeline con la sintaxis declarativa.
// pipeline {
//     // Especifica d칩nde se ejecutar치 el pipeline.
//     // 'agent any' significa que se ejecutar치 en cualquier agente de Jenkins disponible.
//     // Dado que tu contenedor Jenkins est치 en el mismo host que tus otros contenedores,
//     // este agente utilizar치 el socket de Docker del host.
//     agent any

//     // Define variables de entorno que se usar치n a lo largo del pipeline.
//     // Esto centraliza la configuraci칩n y hace el script m치s legible y f치cil de mantener.
//     environment {
//         // Nombre de tu aplicaci칩n. Se usar치 para nombrar la imagen Docker y el contenedor.
//         APP_NAME = 'my-react-app' // <--- 춰AJUSTA ESTO a un nombre descriptivo para tu app!

//         // Puerto interno que tu aplicaci칩n React (a trav칠s de Nginx) expone dentro del contenedor.
//         // Para la configuraci칩n de Nginx que te di, este debe ser 80.
//         CONTAINER_PORT = '80'

//         // Puerto en el host (tu servidor) donde la aplicaci칩n ser치 accesible.
//         // Elige un puerto disponible en tu servidor (ej. 3000, 8080, 8081, etc.).
//         HOST_PORT = '80'
//     }

//     // Define las etapas (stages) del pipeline. Cada etapa representa un paso l칩gico.
//     stages {
//         stage('Checkout Code') {
//             // Esta etapa clona el c칩digo del repositorio.
//             // Jenkins lo hace autom치ticamente al inicio del pipeline si est치 configurado con SCM,
//             // pero esta etapa expl칤cita es 칰til para verla en la interfaz de Jenkins y confirmar.
//             steps {
//                 echo "Clonando el repositorio Git..."
//                 // Puedes a침adir pasos de verificaci칩n de c칩digo aqu칤 si es necesario.
//             }
//         }

//         stage('Build Docker Image Locally on Host') {
//             // Esta etapa construye la imagen Docker de tu aplicaci칩n React.
//             // Utiliza el Dockerfile y nginx.conf que has colocado en la ra칤z de tu repo.
//             steps {
//                 script {
//                     echo "Construyendo la imagen Docker '${APP_NAME}:latest' en el host..."
//                     // El comando `docker build` se ejecuta en el host Docker
//                     // a trav칠s del socket montado en el contenedor de Jenkins.
//                     // El '.' indica que el contexto de construcci칩n es el directorio de trabajo actual
//                     // (donde Jenkins clon칩 tu repositorio y donde est치 tu Dockerfile).
//                     sh "docker build -t ${APP_NAME}:latest ."
//                 }
//             }
//         }

//         stage('Stop and Remove Old Container') {
//             // Esta etapa detiene y elimina el contenedor de la versi칩n anterior de tu aplicaci칩n.
//             // Esto es necesario para poder levantar un nuevo contenedor con la nueva imagen.
//             steps {
//                 script {
//                     echo "Deteniendo y eliminando el contenedor antiguo si existe..."
//                     // `docker stop` y `docker rm` se ejecutan en el host.
//                     // `|| true` asegura que el pipeline no falle si el contenedor no existe
//                     // (칰til en el primer despliegue o si el contenedor ya fue eliminado).
//                     sh "docker stop ${APP_NAME}-container || true"
//                     sh "docker rm ${APP_NAME}-container || true"
//                 }
//             }
//         }

//         stage('Run New Container') {
//             // Esta etapa inicia un nuevo contenedor Docker con la imagen reci칠n construida.
//             steps {
//                 script {
//                     echo "Levantando el nuevo contenedor '${APP_NAME}-container'..."
//                     // `docker run`: Comando para crear y ejecutar un nuevo contenedor.
//                     // -d: Ejecuta el contenedor en modo 'detached' (en segundo plano).
//                     // --name ${APP_NAME}-container: Asigna un nombre espec칤fico al contenedor para f치cil referencia.
//                     // -p ${HOST_PORT}:${CONTAINER_PORT}: Mapea el puerto del host al puerto interno del contenedor.
//                     //   Aseg칰rate de que HOST_PORT sea un puerto disponible en tu servidor.
//                     //   CONTAINER_PORT debe ser '80' porque tu configuraci칩n de Nginx lo expone en el puerto 80.
//                     // ${APP_NAME}:latest: La imagen Docker a utilizar para el nuevo contenedor.
//                     sh "docker run -d --name ${APP_NAME}-container -p ${HOST_PORT}:${CONTAINER_PORT} ${APP_NAME}:latest"
//                 }
//             }
//         }

//         stage('Post-Deployment Verification (Optional)') {
//             // Esta etapa es opcional pero altamente recomendada para verificar que la aplicaci칩n
//             // se ha desplegado correctamente y est치 respondiendo.
//             steps {
//                 script {
//                     echo "Realizando una verificaci칩n post-despliegue..."
//                     // Puedes a침adir un `curl` o `wget` para hacer una petici칩n HTTP a un endpoint de tu aplicaci칩n.
//                     // Por ejemplo, si tu app React tiene un endpoint de salud o simplemente la ruta ra칤z.
//                     // sh "curl -f http://localhost:${HOST_PORT}/ || error 'La aplicaci칩n no responde despu칠s del despliegue!'"
//                     echo "Verificaci칩n simple completada. Considera a침adir una prueba m치s robusta."
//                 }
//             }
//         }
//     }

//     // Bloque 'post' para definir acciones a ejecutar despu칠s de que todas las etapas hayan terminado,
//     // independientemente del resultado (칠xito o fallo).
//     post {
//         always {
//             echo "Pipeline finalizado. Revisa la 'Console Output' para m치s detalles."
//         }
//         success {
//             echo "춰Despliegue de '${APP_NAME}' exitoso! 游꿀 La aplicaci칩n deber칤a estar accesible en el puerto ${HOST_PORT}."
//             // Aqu칤 puedes a침adir notificaciones para el equipo (ej. a Slack, correo electr칩nico).
//         }
//         failure {
//             echo "춰Despliegue de '${APP_NAME}' fallido! 游댮 Hubo errores en el pipeline. Revisa la 'Console Output' cuidadosamente."
//             // Aqu칤 puedes a침adir notificaciones de error a Slack, correo electr칩nico, etc.
//         }
//     }
// }
